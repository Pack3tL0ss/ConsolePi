#!/usr/bin/env bash

# ConsolePi dhcpcd.exit-hook
# System File @ /etc/dhcpcd.exit-hook symlinks to this file (makes updates via repo easier)
#   File is triggered by dhcpcd anytime an interface has dhcp activity (i.e. gets a new lease)
#   It triggers (based on settings in ConsolePi.yaml):
#     - PushBullet Notifications
#     - Updates details to Cloud
#     - Establishes OpenVPN connection

# Locally Defined Variables
do_resolv=true  # Temporary testing Feb 2020
gen_log="/var/log/ConsolePi/consolepi.log"                          # full path to log file
push_response_log="/var/log/ConsolePi/push_response.log"            # full path to send PushBullet API responses
ovpn_log="/var/log/ConsolePi/ovpn.log"                              # full path to send openvpn logs
ovpn_config="/etc/openvpn/client/ConsolePi.ovpn"	                # full path to openvpn configuration
ovpn_creds="/etc/openvpn/client/ovpn_credentials"                   # full path to openvpn creds file with username password
ovpn_options="--persist-remote-ip --ping 15"                        # openvpn command line options
config_builder="/etc/ConsolePi/src/yaml2bash.py"
common_imports="/etc/ConsolePi/installer/common.sh"

if [ -f "$common_imports" ] && . "$common_imports"; then
    log_file="$gen_log" ; unset gen_log  # overrides common.sh setting of install.log, sets to consolepi.log
else
    logger -t 'ConsolePi-dhcpcd.exit-hook' "unable to import common functions"
    # should never happen but if it does fallback to logging to syslog
    logit() {
        local log_msg="${@}"
        local log_msg="${log_msg//-L /}"
        local log_msg="${log_msg//-t /}"
        echo $log_msg
    }
fi


# Get Configuration from config file default if config file doesn't exist
if [[ -f "${config_builder}" ]] && "${config_builder}" > /tmp/ConsolePi.conf && . /tmp/ConsolePi.conf ; then
    rm /tmp/ConsolePi.conf
    # Disable OpenVPN if ovpn config is not found
    $ovpn_enable && [[ ! -f "${ovpn_config}" ]] && ovpn_enable=false && logit -L -t puship-ovpn "OpenVPN is enabled but ConsolePi.ovpn not found - disabling" "ERROR"
else
    logit -L -t puship "Unable to find or Parse Configuration... disabling hooks" "ERROR"
	push=false                                                          # PushBullet Notifications: true - enable, false - disable
	ovpn_enable=false                                                   # if enabled will establish VPN connection
	push_api_key="BestToPutYourPBAPIKeyInTheConfigFileNotHere"		    # PushBullet API key
	push_iden="PBidenShouldBeDefinedinConfig"                           # iden of device to send PushBullet notification to if not push_all
	push_all=true                                                       # true - push to all devices, false - push only to push_iden
	vpn_check_ip="10.0.150.1"                                           # used to check VPN (internal) connectivity should be ip only reachable via VPN
	net_check_ip="8.8.8.8"                                              # used to check internet connectivity
	local_domain="arubalab.net"                                         # used to bypass VPN. evals domain sent via dhcp option if matches this var will not establish vpn
    cloud=false                                                         # enable ConsolePi clustering / cloud config sync
    debug=false                                                         # turns on additional logging data
fi


## when called after ovpn connect - assign script parameters to variables ##
[ ! -z $1 ] && arg1="$1"
[ ! -z $2 ] && interface="$2"
[ ! -z $5 ] && new_ip_address="$5"
[ -z $reason ] && reason="OVPN_CONNECTED"

# set variables if script called from shell for testing ##
# Usage for test scriptname test [<domain>]  domain is optional used to specify local_domain to test local connection (otherwise script will determine remote and attempt ovpn if enabled)
# domain defaults to local_domain, specify anything else to test vpn
if [[ $1 == "test" ]]; then
    logit -L -t puship "Setting random test Variables script ran from shell" "DEBUG"
    debug=true
    rand1=`shuf -i 3-254 -n 1`
    rand2=`shuf -i 3-254 -n 1`
    reason=BOUND
    interface=eth0
    new_ip_address="10.1.$rand1.$rand2"
    if [ ! -z $2 ] ; then
        if [ ${2,,} == "static" ] ; then
            reason=STATIC
            new_domain=${3:-$local_domain}
            # [ ! -z $3 ] && new_domain="$3" || new_domain_name="$local_domain"
        else
            new_domain=${2:-$local_domain}
            # [ ! -z $2 ] && new_domain="$2" || new_domain_name="$local_domain"
        fi
    fi
    echo $new_domain
fi

# >> Debug Messages <<
if $debug; then
  logit -L -t puship "$interface - $reason" "DEBUG"
fi


# >> Send Messages to PushBullet <<
Push() {
    echo -e "\n---- $(date) ----" >> "$push_response_log"
    if $push_all || [ -z $push_iden ]; then
        # Push to all devices
        curl -u "$push_api_key" https://api.pushbullet.com/v2/pushes -d type=note -d title="$pushTitle" -d body="$pushMsg" >> "$push_response_log" 2>&1
    else
        # Push only to device specified by push_iden
        curl -u "$push_api_key" https://api.pushbullet.com/v2/pushes -d device_iden="$push_iden" -d type=note -d title="$pushTitle" -d body="$pushMsg" >> "$push_response_log" 2>&1
    fi

    [ "$reason" != "OVPN_CONNECTED" ] && logit -L -t puship "$logMsg" || logit -L -t puship-ovpn "Sent Push Notification OVPN $interface IP $new_ip_address"
}

# >> Store Newly assigned IPs to tmp files <<
StashNewIP() {
    logit -L -t puship "[StashNewIP] $interface IP change detected from ${last_ip:-undefined} to $new_ip_address"
    echo $new_ip_address > /tmp/$interface      # Place newip in tmp file for safe keeping new bind after carrier lost results in nul $old_ip_address being passed from dhcpcd so stashing it
    echo "domain=$new_domain_name" >> /tmp/$interface    # Stash new domain, used by HotSpot feature. HotSpot DHCP Server passes this domain to hotspot clients if exists
    echo "last_update=$(date +'%s')" >> /tmp/$interface       # TimeStamp not currently used but can be to put a cap on push frequency if something started causing a lot of them
}

GetCurrentIP() {
    sys_interface_list=`ls /sys/class/net | grep -v lo`
    # declare -A interfaces # declared outside of function for portability
    for _interface in ${sys_interface_list[@]}; do
        this_ip=`ip addr show dev $_interface | grep 'inet '| cut -d: -f2 |cut -d/ -f1| awk '{ print $2}'`
        [ ${#this_ip} -gt 0 ] && interfaces[$_interface]=$this_ip
    done
    xgw=`netstat -rn |grep '^0.0.0.0\s*'|cut -d: -f2| awk '{print $2}'`
}

# >> Check Connectivity to net or VPN <<
Ping_Check() {
    $debug && logit -L -t puship "Enter Ping_Check Function" "DEBUG"
    if [ -z "$2" ]; then
        ping -c 1 $1 &> /dev/null && ping_ok=true || ping_ok=false
    else
        ping -c 1 -I $2 $1 &> /dev/null && ping_ok=true || ping_ok=false
    fi
}

# >> Establish VPN Connection <<
Connect_VPN() {
    $debug && logit -L -t puship "Enter Connect_VPN Function" "DEBUG"
    [ $reason = 'BOUND' ] && logit -L -t puship-ovpn "Initial binding of interface pausing 5 seconds to ensure interface is up" && sleep 5
    openvpn --config ${ovpn_config} --auth-user-pass ${ovpn_creds} --log-append ${ovpn_log} ${ovpn_options} --writepid /var/run/ovpn.pid --daemon
    logit -L -t puship-ovpn "Starting OpenVPN client connection."
}

# >> Check if VPN process is running and get PID <<
Check_VPN_Running() {
    $debug && logit -L -t puship "Enter Check_VPN_Running Function" "DEBUG"
    PID=`ps -elf | grep "openvpn" | grep -v grep | awk '{print $4}'`
    [ "" !=  "$PID" ] && vpn_run=true || vpn_run=false
}

# >> Check if VPN needs to be established <<
Check_VPN() {
    $debug && logit -L -t puship "Enter Check_VPN Function ${local_domain}" "DEBUG"
    GetCurrentIP
    if [ -z "${interfaces[tun0]}" ]; then
      Ping_Check "$net_check_ip" "$interface"
      if $ping_ok; then
        [ "${new_domain_name}" = "${local_domain}" ] && remote=false || remote=true
        $remote && Connect_VPN || logit -L -t puship-ovpn "Not starting VPN - device connected to home lab"
      else
          logit -L -t puship-ovpn "OpenVPN start Bypassed due to failed network connectivity from ${interface}." "WARNING"
      fi
    else
      Ping_Check "$vpn_check_ip"
      if $ping_ok; then
        logit -L -t puship-ovpn "OpenVPN start initiated but vpn is up (${interfaces[tun0]}).  Doing nothing"
      else
        Check_VPN_Runing
        $vpn_run && pkill -SIGTERM -F /var/run/ovpn.pid
        $vpn_run && logit -L -t puship-ovpn "VPN process is running with IP ${interfaces[tun0]} but VPN rechablity failed.  Restarting" "WARNING"
        Connect_VPN
      fi
    fi
}


BuildMsg() {
    $debug && logit -L -t puship "Enter BuildMsg Function" "DEBUG"
    GetCurrentIP
    if [ "$1" = "bound" ]; then
        pushTitle="$HOSTNAME $new_ip_address"
        pushMsg="ConsolePi IP Update"
    else
        pushTitle="$HOSTNAME VPN Established: ${new_ip_address}"
        pushMsg="ConsolePi VPN Connection success on ${interface}"
    fi
    logMsg="PushBullet Notification Sent. "

    for i in "${!interfaces[@]}"; do
        pushMsg="$pushMsg %0A $i: ${interfaces[$i]}"
        logMsg="$logMsg | $i: ${interfaces[$i]}"
    done
    pushMsg="$pushMsg %0A GW: $xgw"
    logMsg="$logMsg | GW: $xgw"

    if $wired_dhcp ; then
        do_wired_dhcp_active && dhcp_msg='Active' || dhcp_msg='Not Active'
        pushMsg="$pushMsg %0A wired-dhcp: $dhcp_msg"
    fi
}

# >> Check if IP new_ip_address is same as previously pushed IP <<#
Check_is_new_ip() {
    $debug && logit -L -t puship "Enter check_is_new_ip Function Old: ${last_ip:-None} new: ${new_ip_address}" "DEBUG"

    if [ -f /tmp/$interface ]; then                                                                     # Pull last IP from file if file exists
        last_ip=`head -1 /tmp/$interface`
        [ "$last_ip" = "$new_ip_address" ] && is_new_ip=false || is_new_ip=true
    fi

    # [ "$old_ip_address" = "$new_ip_address" ] && is_new_ip=false || is_new_ip=true
    $is_new_ip && StashNewIP
}

# update_cloud() {
#     /etc/ConsolePi/cloud/${cloud_svc}/cloud.py &&
#         logit -L -t puship-${cloud_svc} Updated cloud Config ||
#         logit -L -t puship-${cloud_svc} Error returned while Updating cloud Config
# }

update_cloud() {
    logit -L -t puship-${cloud_svc} "Triggering Update in background"
    /etc/ConsolePi/cloud/${cloud_svc}/cloud.py &
}

do_wired_dhcp_active(){
    /bin/systemctl is-active consolepi-wired-dhcp.service >/dev/null 2>&1 && return 0 || return 1
}

# start dhcp eth0 specific instance, if tftp is installed start it if it failed to start prior
start_wired_dhcp () {
    if ! do_wired_dhcp_active; then
        if systemctl start consolepi-wired-dhcp ; then
            logit -L -t puship-wired-dhcp "Successfully started dnsmasq for eth0"
            do_wired_nat
            if which in.tftpd && systemctl is-enabled tftpd-hpa >/dev/null; then
                if ! systemctl is-active tftpd.hpa >/dev/null ; then
                    systemctl start tftpd.hpa &&
                        logit -L -t puship-vrfy-tftpd "Successfully started previously failed tftpd service" ||
                        logit -L -t puship-vrfy-tftpd "Failed to start previously failed tftpd service" "ERROR"
                fi
            fi
        else
            logit -L -t puship-wired-dhcp "Failure occured starting dnsmasq for eth0" "ERROR"
        fi
    else
        do_wired_nat
    fi
}

do_wired_nat() {
    if_w_gw=$(netstat -rn | grep "^0.0.0.0" | awk '{print $8}')
    if [[ "$if_w_gw" == "wlan0" ]]; then
        if Ping_Check "$net_check_ip" && $ping_ok ; then
            logit -L -t puship-nat "Configuring nat out wlan"
            rc=0
            echo 1 > /proc/sys/net/ipv4/ip_forward; ((rc+=$?))

            iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE; ((rc+=$?))
            iptables -A INPUT -i wlan0 -m state --state RELATED,ESTABLISHED -j ACCEPT; ((rc+=$?))
            iptables -A FORWARD -j ACCEPT; ((rc+=$?))
            [[ $rc == 0 ]] && logit -L -t puship-nat "Configuring nat out wlan - Success" ||
                              logit -L -t puship-nat "Configuring nat out wlan - Error Code Returned ($rc)" "ERROR"

            # TODO ovpn_share currently not implemented
            if $ovpn_enable && $ovpn_share ; then
                logit -L -t puship-ovpn-share "Configuring ConsolePi Shared OpenVPN tunnel"
                if [ ! -z ${interfaces[tun0]} ]; then
                    rc=0
                    iptables -t nat -A POSTROUTING -o tun0 -j MASQUERADE; ((rc+=$?))
                    iptables -A INPUT -i tun0 -m state --state RELATED,ESTABLISHED -j ACCEPT; ((rc+=$?))

                    [[ $rc == 0 ]] && logit -L -t puship-ovpn-share "Configure ConsolePi Shared OpenVPN tunnel - Success" ||
                                      logit -L -t puship-ovpn-share "Configure ConsolePi Shared OpenVPN tunnel - Error Code Returned ($rc)" "ERROR"
                else
                    logit -L -t puship-ovpn-share "Configure ConsolePi Shared OpenVPN tunnel - Skipped, No tunnel interface" "WARNING"
                fi
            fi
        else
            logit -L -t puship-nat "Bypassed nat configuration do to lack of internet connectivity" "WARNING"
        fi
    fi
}

run() {
    $debug && logit -L -t puship "Enter run Function" "DEBUG"

    [[ $reason == 'STATIC' ]] && $wired_dhcp && start_wired_dhcp

    Check_is_new_ip
    if $is_new_ip; then
        BuildMsg "bound"
        $push && Push
        $cloud && update_cloud
        $ovpn_enable && Check_VPN
    else
        $push && logit -L -t puship "$interface IP is same as prior ($new_ip_address) No Need for Push Notification."
        $cloud && logit -L -t puship-cloud "$interface IP is same as prior ($new_ip_address) No Need to update cloud."
    fi
}

# __main__
[[ $new_domain_name == $local_domain ]] && remote=false || remote=true
# resolvconf -l | grep -q "^domain $local_domain$" ; echo $?  # Alternative method to determine if local_domain assigned on ANY interface
$debug && [[ -z $local_domain ]] && local_domain="null_local_domain"
$debug && [[ -z $new_domain_name ]] && new_domain_msg="null_cur_domain"
$debug && logit -L -t puship "Arguments: $1 $interface $3 $4 $new_ip_address $6 $7 $reason $local_domain $new_domain_msg $remote" "DEBUG"
declare -A interfaces

case "$reason" in
  OVPN_CONNECTED)
     StashNewIP
     BuildMsg "OVPN"
     $push && Push
     $cloud && update_cloud
     $do_resolv && /etc/openvpn/update-resolv-conf
     $debug && logit -L -t puship "Reached end of OVPN_CONNECTED flow" "DEBUG"
     exit 0
     ;;
  BOUND|REBIND)
     run
     $debug && logit -L -t puship "Reached end of New Lease flow" "DEBUG"
     exit 0
     ;;
  STATIC)
    if [ $interface == "eth0" ] ; then
        # $wired_dhcp && start_wired_dhcp
        run
    fi
    $debug && logit -L -t puship "Reached end of STATIC flow" "DEBUG"
    exit 0
    ;;
  *)
     exit 0
     ;;
esac
