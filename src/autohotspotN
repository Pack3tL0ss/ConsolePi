#!/bin/bash
#version 0.95-4-N/HS-I ConsolePi Rev 1.5

#You may share this script on the condition a reference to RaspberryConnect.com 
#must be included in copies or derivatives of this script. 

#Network Wifi & Hotspot with Internet
#A script to switch between a wifi network and an Internet routed Hotspot
#A Raspberry Pi with a network port required for Internet in hotspot mode.
#Works at startup or with a seperate timer or manually without a reboot
#Other setup required find out more at
#http://www.raspberryconnect.com

#Slight Modifications for ConsolePi
#variablelize hotspot IP referenced in createAdHocNetwork
#import ConsolePi.conf for variable values
#Add chkWiredState function
# chkWiredState modifies the dnsmasq DHCP server configuration
# So the hotspot will provide an IP with no default gateway
# if the wired interface is down.  It also cheks the domain
# provided to the wired interface via DHCP and provides that
# same domain to hotspot clients.

# The default-gateway bit is done so you can connect
# in a dual nic setup and not corrupt your routing table
# with an invalid route

# Passing on the domain the the hostpot users is primarily done
# for auto-openvpn which will not initiate a connection if the
# ConsolePi is connected to your home network.  So it's primarily
# for me during dev to prevent openvpn from starting while I'm testing
# stuff i.e. ConsolePi connected to ConsolePi

# Supported override variables (define the variable in ConsolePi.conf to override with different value)
# wlan_wait_time: The amount of time the script waits for connection to an SSID before reverting to hotspot

[[ -f "/etc/ConsolePi/ConsolePi.conf" ]] && . "/etc/ConsolePi/ConsolePi.conf" || wlan_ip=10.99.99.1

wifidev="wlan0" #device name to use. Default is wlan0.
ethdev="eth0" #Ethernet port to use with IP tables
#use the command: iw dev ,to see wifi interface name 

IFSdef=$IFS
cnt=0
# Terminal coloring
_norm='\e[0m'
_bold='\033[1;32m'
_blink='\e[5m'
_red='\e[31m'
_blue='\e[34m'
_lred='\e[91m'
_yellow='\e[33;1m'
_green='\e[32m'
#These four lines capture the wifi networks the RPi is setup to use
wpassid=$(awk '/ssid="/{ print $0 }' /etc/wpa_supplicant/wpa_supplicant.conf | awk -F'ssid=' '{ print $2 }' ORS=',' | sed 's/\"/''/g' | sed 's/,$//')
IFS=","
ssids=($wpassid)
IFS=$IFSdef #reset back to defaults
# Number of seconds the script will pause after wifi is enabled before checking to see if it successfully connected.
[ -z $wlan_wait_time ] && wlan_wait_time=20


#Note:If you only want to check for certain SSIDs
#Remove the # in in front of ssids=('mySSID1'.... below and put a # infront of all four lines above
# separated by a space, eg ('mySSID1' 'mySSID2')
#ssids=('mySSID1' 'mySSID2' 'mySSID3')

#Enter the Routers Mac Addresses for hidden SSIDs, seperated by spaces ie 
#( '11:22:33:44:55:66' 'aa:bb:cc:dd:ee:ff' ) 
mac=()

ssidsmac=("${ssids[@]}" "${mac[@]}") #combines ssid and MAC for checking

get_ssid_details() {
       wlan_ip_addr=$(wpa_cli -i $wifidev status | grep ip_address | cut -d'=' -f2)
       which iwgetid >/dev/null &&
       echo -e "$1 connected to ${_green}$(iwgetid $wifidev -r)${_norm} with IP ${wlan_ip_addr} AP $(iwgetid $wifidev -a | awk '{print $4}') using $(iwgetid $wifidev -f|awk '{print $2}')" ||
       echo "$HOSTNAME is connected to a valid SSID"
}

createAdHocNetwork()
{
    echo "Creating Hotspot"
    ip link set dev "$wifidev" down
    ip a add ${wlan_ip}/24 brd + dev "$wifidev"
    ip link set dev "$wifidev" up
    debug=`ip addr show dev wlan0 | grep 'inet '| cut -d: -f2 |cut -d/ -f1| awk '{ print $2}'`
	echo "${wifidev} is up with ip: ${debug}"
    # logger -t autohotspot $wifidev is up with ip: $debug
    dhcpcd -k "$wifidev" >/dev/null 2>&1
    iptables -t nat -A POSTROUTING -o "$ethdev" -j MASQUERADE
    iptables -A FORWARD -i "$ethdev" -o "$wifidev" -m state --state RELATED,ESTABLISHED -j ACCEPT
    iptables -A FORWARD -i "$wifidev" -o "$ethdev" -j ACCEPT
    ChkWiredState
    systemctl start dnsmasq
    systemctl start hostapd
    echo 1 > /proc/sys/net/ipv4/ip_forward
}

KillHotspot()
{
    echo "Shutting Down Hotspot"
    ip link set dev "$wifidev" down
    systemctl stop hostapd
    systemctl stop dnsmasq
    iptables -D FORWARD -i "$ethdev" -o "$wifidev" -m state --state RELATED,ESTABLISHED -j ACCEPT
    iptables -D FORWARD -i "$wifidev" -o "$ethdev" -j ACCEPT
    echo 0 > /proc/sys/net/ipv4/ip_forward
    ip addr flush dev "$wifidev"
    ip link set dev "$wifidev" up
    dhcpcd  -n "$wifidev" >/dev/null 2>&1
}

ChkWifiUp()
{
	echo "Checking WiFi connection ok"
       echo "pausing $wlan_wait_time seconds to allow wpa_supplicant time to connect"
       sleep $wlan_wait_time #give time for connection to be completed to router
	if ! wpa_cli -i "$wifidev" status | grep 'ip_address' >/dev/null 2>&1
        then #Failed to connect to wifi (check your wifi settings, password etc)
	       echo 'Wifi failed to connect, falling back to Hotspot.'
               wpa_cli terminate "$wifidev" >/dev/null 2>&1
	       createAdHocNetwork
       else
              get_ssid_details Now
	fi
}

ChkWiredState()
{
       eth0_ip=`ip addr show dev eth0 | grep 'inet '| cut -d: -f2 |cut -d/ -f1| awk '{ print $2}'`
       eth0_state=`ip addr show dev eth0 | head -1 | sed -n -e 's/^.*state //p' | cut -d ' ' -f1 |awk '{ print $1 }'`
       if [ ${eth0_state} == "UP" ] && [ ${#eth0_ip} -gt 6 ]; then    
              eth0_up=true
       else
              eth0_up=false     
       fi

       # Find out if lease file exists for wire interface
       [ -f /var/lib/dhcpcd*/dhcpcd-${ethdev}.lease ] && wired_lease=true || wired_lease=false   
       # If ethdev is up and has a lease, pass the same domain to WLAN clients on the hotspot
       if $eth0_up && $wired_lease; then 
            # eth0_dom=$(sed "$(expr $(grep -a -n "$HOSTNAME" /var/lib/dhcpcd*/*${ethdev}.lease | cut -f1 -d:) + 1)q;d" /var/lib/dhcpcd*/*${ethdev}.lease | cut -f1 -d\*)
            [ -f /tmp/$ethdev ] && eth0_dom=$(grep 'domain=' /tmp/$ethdev) || echo [ConsolePi-AutoHotSpot] $ethdev tmp file not found
            [ ${#eth0_dom} -gt 9 ] && valid_dom=true || valid_dom=false
            if $valid_dom; then
                if ! $(grep -q 'domain=' /etc/dnsmasq.conf); then
                    sed -i -e :a -e '/^\n*$/{$d;N;};/\n$/ba' /etc/dnsmasq.conf # make sure EoF has \n 
                        echo "${eth0_dom}" >> /etc/dnsmasq.conf &&
                        use_eth_dom=true || use_eth_dom=false
                else
                     sed -i "/domain=/s/.*/${eth0_dom}/" /etc/dnsmasq.conf && 
                     use_eth_dom=true || use_eth_dom=false
                fi
                $use_eth_dom && echo Active Lease Found on $ethdev with $eth0_dom using same for HotSpot clients ||
                echo [ERROR AutoHotSpotN:ChkWiredState] Failed to Configure Domain $eth0_dom for HostSpot clients
            else
                echo A lease was found for $ethdev but no Domain was provided Removing Domain for HotSpot clients
                sed -i '/^domain=.*/s/^/#/g' /etc/dnsmasq.conf
            fi
       fi

       if ! $eth0_up || ! $wired_lease; then
              sed -i '/^domain=.*/s/^/#/g' /etc/dnsmasq.conf &&
              echo Removing Domain for HotSpot clients as there is no lease on $ethdev or $ethdev is down ||
              echo [ERROR AutoHotSpotN:ChkWiredState] Failed to Remove Domain for HotSpot clients
       fi

       if $eth0_up; then
              sed -i '/^dhcp-option=wlan0,3/s/^/#/g' /etc/dnsmasq.conf #comment out option 3 - default behavior assigns i/f address as def-gw
              echo Bringing up hotspot with gateway as eth0 is up with IP $eth0_ip
       else
              sed -i '/^#dhcp-option=wlan0,3/s/^#//g' /etc/dnsmasq.conf	#uncomment line defines option 3 with no value, over-riding default behavior no gw assigned
              echo Bringing up hotspot with no gateway due to no eth0 connection
       fi
}

FindSSID()
{
#Check to see what SSID's and MAC addresses are in range
ssidChk=('NoSSid')
i=0; j=0
until [ $i -eq 1 ] #wait for wifi if busy, usb wifi is slower.
do
        ssidreply=$((iw dev "$wifidev" scan ap-force | egrep "^BSS|SSID:") 2>&1) >/dev/null 2>&1 
        echo "SSid's in range: " $ssidreply
        echo "Device Available Check try " $j
        if (($j >= 10)); then #if busy 10 times goto hotspot
                 echo "Device busy or unavailable 10 times, going to Hotspot"
                 ssidreply=""
                 i=1
	elif echo "$ssidreply" | grep "No such device (-19)" >/dev/null 2>&1; then
                echo "No Device Reported, try " $j
		NoDevice
        elif echo "$ssidreply" | grep "Network is down (-100)" >/dev/null 2>&1 ; then
                echo "Network Not available, trying again" $j
                j=$((j + 1))
                sleep 2
	elif echo "$ssidreply" | grep "Read-only file system (-30)" >/dev/null 2>&1 ; then
		echo "Temporary Read only file system, trying again"
		j=$((j + 1))
		sleep 2
	elif echo "$ssidreply" | grep "Invalid exchange (-52)" >/dev/null 2>&1 ; then
		echo "Invalid Exchange ~ Transient Error, trying again"
		j=$((j + 1))
		sleep 2
	elif ! echo "$ssidreply" | grep "resource busy (-16)"  >/dev/null 2>&1 ; then
               echo "Device Available, checking SSid Results"
		i=1
	else #see if device not busy in 2 seconds
                echo "Device unavailable checking again, try " $j
		j=$((j + 1))
		sleep 2
	fi
done

for ssid in "${ssidsmac[@]}"
do
     if (echo "$ssidreply" | grep "$ssid") >/dev/null 2>&1
     then
	      #Valid SSid found, passing to script
              echo "Valid SSID Detected, assesing Wifi status"
              ssidChk=$ssid
              return 0
      else
	      #No Network found, NoSSid issued"
              echo "No SSid found, assessing WiFi status"
              ssidChk='NoSSid'
     fi
done
}

NoDevice()
{
	#if no wifi device,ie usb wifi removed, activate wifi so when it is
	#reconnected wifi to a router will be available
	echo "No wifi device connected"
	wpa_supplicant -B -i "$wifidev" -c /etc/wpa_supplicant/wpa_supplicant.conf >/dev/null 2>&1
	exit 1
}

FindSSID

#Create Hotspot or connect to valid wifi networks
if [ "$ssidChk" != "NoSSid" ] 
then
       echo 0 > /proc/sys/net/ipv4/ip_forward #deactivate ip forwarding
       if systemctl status hostapd | grep "(running)" >/dev/null 2>&1
       then #hotspot running and ssid in range
              KillHotspot
              echo "Hotspot Deactivated, Bringing Wifi Up"
              wpa_supplicant -B -i "$wifidev" -c /etc/wpa_supplicant/wpa_supplicant.conf >/dev/null 2>&1
              ChkWifiUp
       elif { wpa_cli -i "$wifidev" status | grep 'ip_address'; } >/dev/null 2>&1
       then #Already connected
              # echo "Wifi already connected to a network"
              get_ssid_details Already
       else #ssid exists and no hotspot running connect to wifi network
              echo "Connecting to the WiFi Network"
              wpa_supplicant -B -i "$wifidev" -c /etc/wpa_supplicant/wpa_supplicant.conf >/dev/null 2>&1
              ChkWifiUp
       fi
else #ssid or MAC address not in range
       if systemctl status hostapd | grep "(running)" >/dev/null 2>&1
       then
              echo "Hostspot already active"
       elif { wpa_cli status | grep "$wifidev"; } >/dev/null 2>&1
       then
              echo "Cleaning wifi files and Activating Hotspot"
              wpa_cli terminate >/dev/null 2>&1
              ip addr flush "$wifidev"
              ip link set dev "$wifidev" down
              rm -r /var/run/wpa_supplicant >/dev/null 2>&1
              createAdHocNetwork
       else #"No SSID, activating Hotspot"
              createAdHocNetwork
       fi
fi
