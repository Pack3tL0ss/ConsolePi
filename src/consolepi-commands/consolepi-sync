#!/usr/bin/env bash

consolepi_dir="/etc/ConsolePi"
log_file="/tmp/consolepi-sync.log"
iam=$(who -m |  awk '{print $1}')
[ -z $iam ] && iam=$SUDO_USER # cockpit shell
[ "$iam" = "root" ] && home_dir="/${iam}" || home_dir="/home/${iam}"
local_pull_file=$home_dir/local_pull
rem_user='pi'
loc_pull_host='ConsolePi-dev'
upgrade_pip=false
cp_lib=true
loc_pull=false
stash_local=false
DEBUG=true

dots() {
    local pad=$(printf "%0.1s" "."{1..60})
    printf " * %s%*.*s" "$1" 0 $((60-${#1})) "$pad"
    return 0
}

do_error() {
    local status=$1
    if [[ $status != 0 ]]; then
        echo 'Failed!!' ; echo "\n"
        [[ -f $log_file ]] && cat $log_file && rm $log_file
        dirs $(dirs | tr " " "\n" | wc -l) -gt 1 ]] && popd >/dev/null
        exit 1
    fi
    echo "OK"
}

user_input_bool() {
  local prompt = $1
  echo
  while [[ -z $response ]] || [[ ! "$response" =~ ^(yes|y|no|n)$ ]]; do
    read -ep "${prompt}? (y/N): " local response
    local response=${response,,}
    [[ "$response" =~ ^(no|n)$ ]] && exit 0
  done
}

do_perms() {
    echo " -- Verify Permissions"
    dots "verify ConsolePi dir exists"
    [ -d $consolepi_dir ] ; do_error $?

    dots "verify $iam is member of consolepi group"
    [[ $(groups) =~ 'consolepi' ]] ; do_error $?

    check_list=("$consolepi_dir" "$consolepi_dir/.git")
    [[ -f $consolepi_dir/.static.yaml ]] && check_list+=("$consolepi_dir/.static.yaml")

    for d in "${check_list[@]}"; do
      dots "Verifying Permissions for $d"
      sudo chgrp -R consolepi ${d} 2>> $log_file ; local rc=$?
      sudo chmod g+w -R ${d} 2>> $log_file ; local rc=$?
      do_error $rc
    done
}

do_git_pull() { 
  pushd /etc/ConsolePi >/dev/null
  branch=$(git rev-parse --abbrev-ref HEAD)
  dots "git pull ConsolePi (${branch})"
  git pull 2>>$log_file ; local rc=$?
  popd >/dev/null
  do_error $rc
}

do_loc_pull() {
  if [[ -f $local_pull_file ]] ; then
    echo " -- Performing local only Pull"
    orig_IFS=$IFS
    IFS=$'\r\n' GLOBIGNORE='*' command eval  "sync_files=(\$(cat ${local_pull_file}))"
    for f in "${sync_files[@]}" ; do
      dots "Pulling $f via SFTP"
      pushd ${f##*/} >/dev/null
      sftp $loc_pull_user@$loc_pull_host:$f ; local rc=$?
      popd >/dev/null
      do_error $rc
    done
    IFS=$orig_IFS
  else
    echo '!! No Local Pull File Found... exitting !!' ; exit 1
  fi
}

do_stash_local() {
  if [[ -f $local_pull_file ]] ; then
    echo " -- Stashing files previously pulled manually"
    orig_IFS=$IFS
    IFS=$'\r\n' GLOBIGNORE='*' command eval  "sync_files=(\$(cat ${local_pull_file}))"
    for f in "${sync_files[@]}" ; do
      dots "Stashing $f to $home_dir/.local_pull_stash"
      mkdir -p $home_dir/.local_pull_stash
      mv $f $home_dir/.local_pull_stash ; do_error $?
    done
    IFS=$orig_IFS
    user_input_bool "Stash Complete, Proceed with remaining Sync Operations" local response
  else
    echo '!! No Local Pull File Found... exitting !!' ; exit 1
  fi
}

do_cp_lib() {
  dots "Copying ConsolePi library to site-packages"
  sudo cp /etc/ConsolePi/src/PyConsolePi/* /etc/ConsolePi/venv/lib/python3*/site-packages/consolepi/ ; do_error $?
}

do_pip_upgrade() {
  py3ver=$(python3 -V | cut -d. -f2)
  [ $py3ver -ge 6 ] && req_file="/etc/ConsolePi/installer/requirements.txt" ||
                      req_file="/etc/ConsolePi/installer/requirements-legacy.txt"

  echo  " -- pip install/upgrade ConsolePi requirements - This can take some time."
  dots "Upgrade pip"
  sudo /etc/ConsolePi/venv/bin/python3 -m pip install --upgrade pip 1>$log_file 2>&1 ; do_error $?
  dots "Upgrade ConsolePi Dependencies"
  sudo /etc/ConsolePi/venv/bin/python3 -m pip install --upgrade -r ${req_file} 1>$log_file ; do_error $?
}

line_dots() {
  local pad=$(printf "%0.1s" "."{1..40})
  printf " %s%*.*s" "$1" 0 $((40-${#1})) "$pad" ; echo $2
}

show_help() {
  echo 
  [[ ! "$1" =~ ^(help|-help|--help)$ ]] && echo "Invalid Input $1"
  echo -e "valid command line options:"
  line_dots "-pip" "Update pip and dependencies"
  line_dots "-nocp" "Don't Copy consolpi-library to venv after git pull."
  echo -e "\nThe Following Options are generally only useful for the developer"
  line_dots "-local" "Syncs files via SFTP from the dev ConsolePi."
  line_dots "-stash" "Stashes files previoulsy synced via SFTP to clean local working dir for git pull"
  line_dots "--local-host <ip or host>" "Override the default local dev ConsolePi ($loc_pull_host)"
  line_dots "--rem_user <username>" "Override the default user ($rem_user) used during local_pull (sftp to $loc_pull_host)"
  echo
}

process_args() {
    $DEBUG && echo "DEBUG: Args Passed to process_args() ${@}"  ## -- DEBUG LINE --
    while (( "$#" )); do
      if $DEBUG; then
        echo -e "DEBUG: ------------ initial variable values ------------"
        echo -e "upgrade_pip=${upgrade_pip}\ncp_lib=$cp_lib\nloc_pull=${loc_pull}\nloc_pull_host=${loc_pull_host}\nstash_local=${stash_local}\nrem_user=$rem_user\n"
        echo -e "DEBUG TOP ~ Currently evaluating: '$1'"
      fi

      case "$1" in
        -pip)
            upgrade_pip=true
            shift
            ;;
        -nocp)
            cp_lib=false
            shift
            ;;
        -local)
            loc_pull=true
            shift
            ;;
        -stash)
            stash_local=true
            shift
            ;;
        --local-host) # override default local_pull_host (consolepi-dev)
            [[ ! -z "$2" ]] && loc_pull_host=$2 || ( 
                echo "Missing 1 required parameter with $1 option"
                exit 1
              )
            shift 2
            ;;
        --rem-user) # override default rem_user (pi)
          [[ ! -z "$2" ]] && rem_user=$2 || (
            echo "Missing 1 required parameter with $1 option"
            exit 1
            )
          ;;
        *)
          show_help $1
          exit 1
          ;;
      esac

        if $DEBUG; then
          echo -e "DEBUG: ------------ final variable values ------------"
          echo -e "upgrade_pip=${upgrade_pip}\ncp_lib=$cp_lib\nloc_pull=${loc_pull}\nloc_pull_host=${loc_pull_host}\nstash_local=${stash_local}\nrem_user=$rem_user\n"
          echo "------------------------------------------------------------------------------------------" # -- DEBUG Line --
        fi
    done
}

dev_host_check() {
  if [[ ${HOSTNAME,,} == "consolepi-dev" ]] ; then
    user_input_bool "This appears to be the development ConsolePi, Proceed with Sync" local response
  fi
}

main() {
  $DEBUG && echo DEBUG: Args Passed to Script: "${@}"
  dev_host_check
  process_args "${@}"
  $stash_local && do_stash_local
  do_perms
  ! $loc_pull && do_git_pull || do_loc_pull
  $cp_lib && do_cp_lib
  $upgrade_pip && do_pip_upgrade
}

main "${@}"