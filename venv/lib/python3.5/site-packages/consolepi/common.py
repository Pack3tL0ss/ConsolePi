import logging
import netifaces as ni
import serial.tools.list_ports
import os
import json


# Get Variables from Config
def get_config(var):
    with open('/etc/ConsolePi/ConsolePi.conf', 'r') as cfg:
        for line in cfg:
            if var in line:
                var_out = line.replace('{0}='.format(var), '')
                var_out = var_out.split('#')[0]
                if '"' in var_out:
                    var_out = var_out.replace('"'.format(var), '', 1)
                    var_out = var_out.split('"')
                    var_out = var_out[0]
                break

    if 'true' in var_out.lower() or 'false' in var_out.lower():
        var_out = True if 'true' in var_out.lower() else False

    return var_out


def get_if_ips(log):
    if_list = ni.interfaces()
    log.debug('interface list: {}'.format(if_list))
    ip_list = {}
    pos = 0
    for _if in if_list:
        if _if != 'lo':
            try:
                ip_list[if_list[pos]] = ni.ifaddresses(_if)[ni.AF_INET][0]['addr']
            except KeyError:
                log.info('No IP Found for {} skipping'.format(_if))
        pos += 1
    log.debug('get_if_ips complete: {}'.format(ip_list))
    return ip_list


def get_local(log):

    def log_print(msg, level='info'):
        getattr(log, level)(msg)
        print(msg)

    plog = log_print
    plog('Detecting Locally Attached Serial Adapters')
    this = serial.tools.list_ports.grep('.*ttyUSB[0-9]*', include_links=True)
    tty_list = {}
    tty_alias_list = {}
    for x in this:
        _device_path = x.device_path.split('/')
        if x.device.replace('/dev/', '') != _device_path[len(_device_path)-1]:
            tty_alias_list[x.device_path] = x.device
        else:
            tty_list[x.device_path] = x.device

    final_tty_list = []
    for k in tty_list:
        if k in tty_alias_list:
            final_tty_list.append(tty_alias_list[k])
        else:
            final_tty_list.append(tty_list[k])

    # get telnet port deffinitions from ser2net.conf
    # and build adapters dict
    serial_list = []
    if os.path.isfile('/etc/ser2net.conf'):
        for tty_dev in final_tty_list:
            with open('/etc/ser2net.conf', 'r') as cfg:
                for line in cfg:
                    if tty_dev in line:
                        tty_port = line.split(':')
                        tty_port = tty_port[0]
                        log.info('get_local: found dev: {} TELNET port: {}'.format(tty_dev, tty_port))
                        break
                    else:
                        tty_port = 7000  # this is error - placeholder value Telnet port is not currently used
            serial_list.append({'dev': tty_dev, 'port': tty_port})
            if tty_port == 7000:
                log.error('No ser2net.conf deffinition found for {}'.format(tty_dev))
                print('No ser2net.conf deffinition found for {}'.format(tty_dev))
    else:
        log.error('No ser2net.conf file found unable to extract port deffinitions')
        print('No ser2net.conf file found unable to extract port deffinitions')

    return serial_list

def update_local_cloud_file(local_cloud_file, remote_consoles):
     # NEW Python Menu: Write All Remotes to local file
    if len(remote_consoles) > 0:
        if os.path.isfile(local_cloud_file):
            os.remove(local_cloud_file)
        with open(local_cloud_file, 'a') as new_file:
            new_file.write(json.dumps(remote_consoles))


class ConsolePi_Log:

    def __init__(self, debug=None, log_file='/var/log/ConsolePi/cloud.log'):
        self.debug = debug if debug is not None else get_config('debug')
        self.log_file = log_file
        self.log = self.set_log()

    def set_log(self):
        debug = self.debug
        log_file = self.log_file
        log = logging.getLogger(__name__)
        log.setLevel(logging.INFO if not debug else logging.DEBUG)
        handler = logging.FileHandler(log_file)
        handler.setLevel(logging.INFO if not debug else logging.DEBUG)
        formatter = logging.Formatter('%(asctime)s [%(levelname)s] %(message)s')
        handler.setFormatter(formatter)
        log.addHandler(handler)
        return log

    def log_print(self, msg, level='info'):
        getattr(self.log, level)(msg)
        print(msg)
