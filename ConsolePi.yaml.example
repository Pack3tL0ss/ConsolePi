%YAML 1.2
# -- // Configuration File For ConsolePi \\ --
# Create a Copy of this file with the name ConsolePi.yaml (remove ".example" extension).
---
CONFIG:
  cfg_file_ver: 11 # ---- Do Not Delete or modify this line ---- #
  push: true # PushBullet Notifications: true - enable, false - disable
  push_all: true # PushBullet send notifications to all devices: true - yes, false - send only to device with iden specified by push_iden
  push_api_key: "PutYourPushBulletAPIKeyHere" # PushBullet API key
  push_iden: "PBiden" # iden of device to send PushBullet notification to if not push_all
  ovpn_enable: false # if enabled will establish VPN connection
  vpn_check_ip: 10.0.150.1 # used to check VPN (internal) connectivity should be ip only reachable via VPN
  net_check_ip: 8.8.4.4 # used to check Internet connectivity
  local_domain: example.com # used to bypass VPN. evals domain sent via dhcp option if matches this var will not establish vpn
  hotspot: true  # wheather to enable AutoHotSpot Feature
  wlan_ip: 10.110.0.1 # IP of ConsolePi when in hotspot mode
  wlan_ssid: ConsolePi # SSID used in hotspot mode
  wlan_psk: ConsolePiR0cks!! # psk used for hotspot SSID
  wlan_country: US # regulatory domain for hotspot SSID
  wired_dhcp: false # Run dhcp on eth interface (after trying as client)
  wired_ip: 10.30.110.1 # Fallback IP for eth interface
  btmode: serial # Bluetooth Mode: 'serial' or 'pan'  **Not implemented yet currently always serial**
  cloud: false # enable ConsolePi cloud sync for Clustering (mdns enabled either way)
  cloud_svc: gdrive # must be gdrive (all that is supported now)
  rem_user: consolepi # The user account remotes should use to access this ConsolePi
  power: false # Enable Power Outlet Control
  debug: false # Turns on additional debugging

# --- // The Remaining Sections Are optional \\ ---
# OVERRIDES optional items allowing you to override default beahvior
# The values shown below are to highlight the options, all are set to the default
OVERRIDES:
  skip_utils: false       # if true the install/update script will skip the launch of the consolepi-extras menu.
  cloud_pull_only: false  # Retrieve data from cloud, but don't update cloud with your data.
  compact_mode: false     # Experimental - All Remotes collapsed into a single section in menu.
  disable_ztp: false      # If the ZTP section exists, and wired_dhcp: true, then ztp is enabled. Unless overriden with this option.
  ztp_lease_time: 2m      # When ztp in configured using consolepi-ztp the lease time is set to an aggressive 2min.
  # 2 options for configuring remote_timeout which is the time (secs) allowed for discoverd remote_consolepis to respond to API before being considered unreachable.
  remote_timeout: 3       # Will overide the default (3s) for all remote ConsolePis
  # remote_timeout override for specific devices
  remote_timeout:
    ConsolePi0: 3         # host specific timeout, useful if specific host(s) are slower to respond to API request.
    default: 3            # specifying default is optional, will default to 3 if not provided
  dli_timeout: 7          # seconds to wait for Digital Loggers dli web power switch to respond before failing.
  smartoutlet_timeout: 3  # seconds to wait for smart outlets (esphome / tasmota) to respond before failing.
  cycle_time: 3           # When cycling outlets, delay this many seconds (power off, wait cycle_time seconds, power on).
  ovpn_share: false       # Set to true to allow hotspot traffic to egress via the tunnel (vs. just the wired interface)
  hide_legend: false      # Set to true to hide the legend by default in the menu, can still toggle it back on with 'TL'.
  api_port: 5000          # Change this to use a different API port (for this ConsolePi).

# ZTP (Zero Touch Provisioning) Allows you to leverage ConsolePi to automate the deployment of hardware from factory default.
# Once the configuration and associated templates/variables are defined you must run `consolepi-ztp` to Generate the Configuration
# Refer to the ztp section on the GitHub for more details
ZTP:
  883a30aabbcc:             # ztp entry by mac (format can be with no-delims as shown or any of [':', '.', '-'] note if using colons you need to use double-quotes around it to keep the yaml valid)
    oobm: true              # If set to true, the host entry is made using the oobm MAC (The defined mac + 1).  Allows you to enter the MAC as it is on the barcode, but use oobm which is typically base-mac + 1
    template: 6300M.j2
    variables: variables.yaml
    user: wade              # user/pass/post_cli not implemented yet, but intent is to login via ssh and issue the commands provided in post_cli
    pass: Red@ct3d!
    post_cli: ["start-shell", "vtysh -c \"led locator flash\"", "sleep 5m", "vtysh -c \"led locator off\""]
  ordered:                  # Entries under the ordered key are deployed in order based on fuzzy match of the provided vendor_class(60) strings
    6200:                   # vendor_class Fuzzy Match an entry will be created pointing switches with '6200' in the vendor_class to 6200_1.cfg
      - template: 6200F.j2
        variables: 6200F_1.yaml
        user: wade
        pass: Red@ct3d!
        post_cli: ["start-shell", "vtysh -c \"led locator flash\"", "sleep 5m", "vtysh -c \"led locator off\""]
      - template: 6200F.j2        # Once 6200_1 is deployed to a switch, the rule is updated and 6200_2.cfg will be sent to the next 6200
        variables: 6200F_2.yaml
    2530:
      - template: 2530a.j2    # The first switch with 2530 in the vendor_class will be send 2530_1.cfg

# The POWER section allows you to configure controlled power outlets, which can optionally be linked
# to serial adapters or hosts.  When linked, ConsolePi will ensure the outlet is powered ON when you
# initiate a connection to the device.  See GitHub for more details.
POWER:
  gpio_test:
    address: 4
    linked_devs: ofc-2930F-sw
    type: GPIO
  labpower1:
    type: dli
    address: labpower1.example.com
    username: admin
    password: dlipassword
    linked_devs:
      5900T(ssh): 6
      5900T(Console): [1, 6]
      5900B(Console): [1, 6]
      8320T(Console): [1, 2]
      8320B(Console): [1, 2]
      6300M(oobm): 8
      6300T: 8
      6300B: 8
  labpower2:
    type: dli
    address: 10.0.30.72
    username: admin
    password: FakeP@ssword
    linked_devs:
      FTNew01: [4, 5]
      5900T(Console): 6
  stagepower:
    type: dli
    address: stagepower.example.com
    username: admin
    password: ConsolePiisBitch1n

# The HOSTS Section allows you to configure Manually defined hosts, which will show up in the menu
# as available connection options.  This is for ssh or TELNET hosts.  This is handy for adding connection
# options to devices that may be connected to an existing Terminal Server, or for virtual appliances with
# serial consoles configured in the Hypervisor. -OR- any other ssh/TELNET device you need.  Power Linkages
# work with hosts the same way they do with adapters, just reference the Host i.e. "5900T(ssh)" in the
# "linked_devs" key in the power section above.
# TIP: configuring the ssh public key (of the user you launch the menu with), will allow you to login without
#      the need to enter a password.  By default this would be /home/pi/.ssh/id_rsa.pub (add as authorized key
#      on the remote host (only applies to ssh hosts))
HOSTS:
  5900T(ssh):
    address: 172.30.0.7:22
    method: ssh
    username: wade
    show_in_main: true # means the host will show up in the main menu otherwise it shows up in the remote shell menu
    group: ComWare # Device will show up in group with the group name as the subhead, if not provided it's put in "user-defined"
  5900T(Console):
    address: labdigi.example.com:7007
    method: telnet
    show_in_main: true
    group: ComWare
  8320T(oobm):
    address: 10.0.30.41
    method: ssh
    username: wade
    show_in_main: true
    group: ArubaOS-CX
  8320T(Console):
    address: labdigi.kabrew.com:7011
    method: telnet
    group: ArubaOS-CX
    show_in_main: true
